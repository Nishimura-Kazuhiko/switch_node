2024/10/06

##switch_node.js の説明と使い方

このマニュアルにはプログラム内部の技術的な部分の解説も含まれます
技術解説には頭に[TEC]がついています
未定の部分は __rsv__ としています

###開発信条
- 最もよく行う起動終了までの流れは操作ステップ最小を目指す
- 覚えることが少なくて済むシンプルな操作を目指す
- 直感的に操作できるソフトウェアを目指す
- 頻繁な動作は素早く、稀な動作は丁寧にを目指す
[TEC]アニメーションの使用など
- 多機能度・自由度は丁寧に検討する
[TEC]グリッドによるノードの動きの制限など

###環境
このプログラムはブラウザで動作します
[TEC]
- 主要な動作はp5.jsというjavascriptのライブラリを使用しています
- オフラインでの動作を目指して開発を進めています

###操作と表示
	- マウスによるクリック・ダブルクリック・ドラッグ
		画面上のUI
		- UIパレット
		- ボタン
		- セレクタ（トグルで変化するボタン 3状態以下）
		- ダイアログ
	- キーボードによるキー入力

###機能
このプログラムは大きく分けて4つの機能があります
- グラフ描画機能 view_mode グラフを描画することができます
- グラフ編集機能 edit_mode グラフの形を変更することができます
- スイッチチェック switch_mode スイッチ機能を持つノードのオンオフでグラフの接続の様子を表現できます
- ファイルアクセス read/save 簡単なグラフのデータを読込・書出することができます

###基本的な使い方
 1. 起動
	「switch_node」 フォルダ内の 「index.html」 を Google Chrome などのブラウザで開くことで起動します
	- 初期のデータが与えられていない場合は「edit_mode」で開きます
	- 「user_data」フォルダの中に内容のある「data.dot」が入っている場合は「view_mode」で開きます
	- 「user_data」フォルダの中の「config.txt」で内部で使用する初期設定を変更することができます
 2. グラフの作成・編集
	edit_mode で下記の操作を行いグラフの作成と編集を行います
	- plus ボタンがオンの時（ファイル data.dot なしの時のデフォルト）
		- add_node ボタンがオンの時
			ノード以外の画面上の場所をクリックすることでグラフにノードを1つ追加します
			shift キーが押されている場合は最後に作成したノードの上下左右にノードが作成されます
			追加した直後のノードは他のどのノードにも接続されていません
			ノードには管理のため自動でユニークな名称とラベルが付けられます
			- source_in 開始端として使用するスイッチです
			- source_out 終端として使用するノードです
			- switch ボタンが選択されている場合はノードはスイッチとして作成されます（デフォルト）
			- segment ボタンが選択されている場合はノードはセグメントとして作成されます
			[TEC] segment について
				- ラベルは表示に使われずまた変更もできません
		- add_node_on_edge ボタンがオンの時
			エッジを選択するとその位置にセグメントが作成され エッジが2つに分割されます
			[TEC]技術的にはエッジが1つ追加となります
		- draw_edge ボタンがオンの時
			shift キーを押している場合は最後に作成したのノードの上下左右にだけノードとエッジが作成されます
			- オンにした直後 または draw_edge_reset をかけた直後
				ノード以外の1箇所クリックするとセグメントが作成されます
				2つ目のセグメントが作成されるとそれらをつなぐエッジが作成されます
				ノードをクリックしノードでない1箇所をクリックするとセグメントが作成され、
				これら2つのノードをつなぐエッジが追加で作成されます
			- ctrl キーを押している場合
				ノード以外の1箇所をクリックすると draw_edge_reset がかかりオンにした直後と同じ状態となります
			- esc キーを押した場合
				draw_edge_reset がかかりオンにした直後と同じ状態となります
			- それ以外の場合
				ノード以外の1箇所をクリックするとセグメーテーションが作成され、
				最後に作成したセグメントと作成されたセグメントをつなぐエッジが作成されます
	- select ボタンがオンの時（ファイル data.dot ありの時のデフォルト）
		- ノード・エッジの選択
			クリックやドラッグで複数のノードやエッジを選択することができます
			選択されたノードやエッジは表示が変更されます
			選択したノードやエッジをクリックすると選択が解除されます
			shift キーを押しながらドラッグするとその範囲だけ選択が解除されます
			- node_only ボタンがオンの時は矩形ドラッグでノードのみが選択/解除されます（デフォルト）
			- edge_only ボタンがオンの時は矩形ドラッグでエッジのみが選択/解除されます
			- both ボタンがオンの時は矩形ドラッグでノードとエッジの両方が選択/解除されます
		- 選択の解除
			画面のノードやエッジ以外の場所がクリックされた場合はすべての選択が解除されます
		- エッジの追加
			画面上のノードを2つ選択していてエッジはどれも選択されていない状態の場合に限り
			e キー(edge)を押す または l キー(link)を押す または make_edge ボタンを押すと
			2つのノードの間にエッジを作成します
			エッジには管理のため自動でユニークな名称とラベルが付けられます
		- ノード・エッジの移動
			- lock ボタンが選択されている場合 移動操作は行われません
			- shift キーが押されている場合 全体は起点の上下左右にしか動きません
			- move_on_edge ボタンが選択されている場合
				（ほぼ）直線上にノードが配置されている場合は直線に沿って移動します
			ノードが1つも選択されていない状態で1つのノードをドラッグするとそのノードとそれに接続されたエッジが移動します
			ノードもエッジも選択されていない状態で1つのエッジをドラッグするとそのエッジとその両端のノードが移動します
			ノードが1つ以上選択された状態で、選択されている1つのノードをドラッグするとすべての選択項目が移動できます
			grid_mode ボタンが選択されている場合はノードの移動位置は自動で最も近い位置に変更されます
		- ノード・エッジのラベルの変更
			ノードやエッジのラベル部分をダブルクリックすることでラベルの変更を行うことができます
			半角のアルファベット・数字・記号のみが使用できます
			入力欄に新名称を入れて return キーを押すと新しいラベルが確定します
			esc キー または 入力の場所をクリックすると入力は中断されます
			uniq ボタンが選択されている場合、同名のノードやエッジが存在する場合は変更が無効となります
			（警告のダイアログが出ます）
		- ノードの削除
			ノードを選択した状態で delete キーを押す または delete ボタンを押すと選択されたノードを削除します
			このとき選択されたノードに接続しているエッジもすべて削除されます
			削除したノードに接続していないエッジはすべて残ります
		- エッジの削除
			エッジを選択した状態で delete キーを押す または delete ボタンを押すと選択されたエッジを削除します
		- ノードとエッジの削除
			ノードとエッジを選択した状態で delete キーを押す または delete ボタンを押すと選択項目を削除します
			ノードが削除される場合はノードのみの削除と同じ動作となります
	- undo ボタンを押した時の動作
		ここに記述する操作を1ステップとして1つ前のステップに戻ることができます
		[TEC]1つのステップだと思っていた操作が複数に分かれないようにしています
	- clear ボタンを押した時の動作
 3. スイッチチェックの利用
	switch_mode でスイッチ（に設定されたノード）を切り替えることで動作のシミュレーションをします
	- スイッチを押した時の動作
		トグル動作となり オフの場合はオン オンの場合はオフ となります
		スイッチからたどることのできるエッジの状態が更新されます
		[TEC]更新アルゴリズム
			エッジは on off undef の3状態を持ち undef は off と同じ見た目となる
			両端が switch の場合は on off 2状態のいずれか
			片側 もしくは 両側が セグメントの場合は 3状態のいずれかとなる
			1. すべてのエッジを off にして更新対象にする
			2. source_in の状態に応じて接続されたすべてのエッジを更新する
				更新したエッジを更新対象から除外する
				エッジのもう片側のノードをすべて登録(source_out は除外)
			2. 登録したノードに接続するエッジの状態を更新する
				更新したエッジを更新対象から除外する
				エッジのもう片側のノードをすべて登録(soure_out は除外)
			3. 2の操作を繰り返しすべてのエッジが更新され更新対象から除外されたら終了
			判定
			エッジが switch/source_in -> sorce_out の場合
				前のノードが オン -> エッジは on
				前のノードが オフ -> エッジは off
			エッジが switch/source_in -> switch の場合
				前後のノードが オン -> エッジは on
				それ以外のエッジは -> off
			エッジが switch/source_in -> segment の場合
				前のノードが オン -> エッジは undef
				それ以外のエッジは -> off
				この後 segment の状態で決定する
				segment に接続しているエッジが1つ（自分自身）の時
					エッジは off
				segment に接続しているエッジが2つの時
					1つでも 接続エッジが off -> off
					それ以外 -> on
				segment に接続しているエッジが3つ以上の時
					接続エッジがすべて off 以外 -> on
					接続エッジが1つだけ off -> undef なら on (on なら on のまま)
					接続エッジが1つだけ off以外 -> off
	- undo ボタンを押した時の動作
		スイッチの状態が1つ前に戻ります

 4. ファイルアクセス
	- ファイルの読込
		ctrl + o キー または file_open ボタンでOSのファイル選択が開き選択したファイルを読み込みます
		現在作成しているグラフがある場合は保存するかどうか尋ねるダイアログが出ます
	- ファイルの保存（ダウンロード）
		ダイアログが開きファイル名を入力するように促します
		（デフォルトでは 日付時刻+graph.dot のファイル名が表示されます）
		設定したファイル名でファイルが作成されダウンロードフォルダの中に入ります
		（ダウンロードフォルダの中に同名ファイルがあった場合の動作はブラウザに依存します）

####使用ファイル
	- data.dot	起動時に自動で読込み表示されるグラフのデータです
		[TEC]極めてシンプルな graphviz 用のグラフ表現ファイルです
		 graphviz の dot や neato などのコマンドで .png や .svg に変換が可能です
	- config.txt	内部で使用する初期設定値が書込まれたデータです（グラフの色や描画設定など）
		[TEC]ほぼcsvファイルですが、拡張に対応するために .txt にしています
	- グラフデータファイル（xxx.dot） 読込み・書込みに対応するデータファイルです

###[TEC]実現するためのクラス
 - Config	デフォルト値・今後変わりうる即値などを保持します
 - DrawFunc	描画のためのメソッドの集合です
 - Node	ノード:スイッチや接続点を表示・制御するためのクラスです
 - Edge	エッジ:スイッチや接続点のつながりを表示制御するためのクラスです